source('~/.active-rstudio-document', echo=TRUE)
source("../passphrase_rotation/fnc_Process.R")
token = "52d7ef4ee01e2c2c75bff572f957cd4f12d6225eee07ea2f01d01a"
access = "srv1"
value="10.10.7.xx__citi_pw123"
print(access);   print(value)
## save access info.
encrypt_password_source(access, value)
library(plumber)
source("../passphrase_rotation/fnc_Process.R")
## save access info.
encrypt_password_source(access, value)
update_user_passwords()
## Only need to be run once
## generate private and public key
library(sodium)
pri_key <- keygen()
pub_key <- pubkey(pri_key)
pri_key
pub_key
msg <- serialize(charToRaw("Hello there."), NULL)
ciphertext <- simple_encrypt(msg, pub_key)
ciphertext
# Decrypt message with private key
out <- simple_decrypt(ciphertext, key)
# Decrypt message with private key
out <- simple_decrypt(ciphertext, pri_key)
out
unserialize(out)
charToRaw("Hello there.")
rawToChar(msg)
rawToChar( unserialize(out) )
saveRDS(pri_key, "data/pri_key.rds")
saveRDS(pub_key, "data/pub_key.rds")
k1 <- readRDS("data/pub_key.rds")
k1
rawToChar(k1)
v1 = rawToChar(k1)
charToRaw(v1)
## generate a new passphrase
NEW_PW = paste0( stri_rand_strings(1, 4, pattern="[a-z]"),
stri_rand_strings(1, 6, pattern="[0-9]") )
library(sodium)
library(stringi)
## generate a new passphrase
NEW_PW = paste0( stri_rand_strings(1, 4, pattern="[a-z]"),
stri_rand_strings(1, 6, pattern="[0-9]") )
crypto_pwhash_str
library(curl)
srv_ip = "10.10.7.233"
port = 9000
srv_ip = "10.10.7.233"
port = 9000
token = "52d7ef4ee01e2c2c75bff572f957cd4f12d6225eee07ea2f01d01a"
## fetch public key
qstr = paste0("http://", srv_ip, ":", port,
"/publicKey?token=", token)
qstr
r1 <- curl(qstr)
r1
readLines(r1)
pr <- plumber::plumb("api_server_func.R")
pr
## fetch public key
qstr = paste0("http://", srv_ip, ":", port,
"/publicKey?token=", token)
qstr
r1 <- curl(qstr)
readLines(r1)
k1 <- readBin( curl(qstr) )
srv_ip = "10.10.7.233"
port = 9000
token = "52d7ef4ee01e2c2c75bff572f957cd4f12d6225eee07ea2f01d01a"
## fetch public key
qstr = paste0("http://", srv_ip, ":", port,
"/publicKey?token=", token)
k1 <- readBin( curl(qstr), raw() )
k1 <- readBin( curl(qstr, "rb"), raw() )
k1
k1
srv_ip = "10.10.7.233"
port = 9000
token = "52d7ef4ee01e2c2c75bff572f957cd4f12d6225eee07ea2f01d01a"
## fetch public key
qstr = paste0("http://", srv_ip, ":", port,
"/publicKey?token=", token)
k1 <- readline( curl(qstr, "r") )
k1
k1
srv_ip = "10.10.7.233"
port = 9000
token = "52d7ef4ee01e2c2c75bff572f957cd4f12d6225eee07ea2f01d01a"
## fetch public key
qstr = paste0("http://", srv_ip, ":", port,
"/publicKey?token=", token)
k1 <- readlines( curl(qstr, "r") )
k1 <- readLine( curl(qstr, "r") )
k1 <- readLines( curl(qstr, "r") )
k1
charToRaw(k1)
k1 <- readLines( curl(qstr, "r") )
k1
t1 = "<94><cb>\\u000f<80><e6>c<bf><bf>\\u0013i<a9>Bl<b0>^<94>~\\u0005}\\u0018H-+T9dÈˆJ\\u001c|5"
charToRaw(t1)
priv_token = "52d7ef4ee01e2c2c75bff572f957cd4f12d6225eee07ea2f01d01a"
k1 = readRDS("data/pub_key.rds")
rawToChar(k1)
v1 = rawToChar(k1)
v1
k1
charToRaw(v1)
library(sodium)
library(stringi)
library(curl)
srv_ip = "10.10.7.233"
port = 9000
token = "52d7ef4ee01e2c2c75bff572f957cd4f12d6225eee07ea2f01d01a"
## fetch public key
qstr = paste0("http://", srv_ip, ":", port,
"/publicKey?token=", token)
k1 <- readLines( curl(qstr, "rb") )
k1
k1
k2 = serialize(k1, NULL)
k2
library(sodium)
library(stringi)
library(curl)
srv_ip = "10.10.7.233"
port = 9000
token = "52d7ef4ee01e2c2c75bff572f957cd4f12d6225eee07ea2f01d01a"
## fetch public key
qstr = paste0("http://", srv_ip, ":", port,
"/publicKey?token=", token)
k1 <- readLines( curl(qstr, "rb") )
k1
k1 <- readBin( curl(qstr, "rb") )
?readBin
k1 = readRDS("data/pub_key.rds")
k2 = serialize(k1, NULL)
rawToChar(k2)
k1 = readRDS("data/pub_key.rds")
srv_ip = "10.10.7.233"
port = 9000
token = "52d7ef4ee01e2c2c75bff572f957cd4f12d6225eee07ea2f01d01a"
srv_ip = "10.10.7.233"
port = 9000
token = "52d7ef4ee01e2c2c75bff572f957cd4f12d6225eee07ea2f01d01a"
qstr = paste0("http://", srv_ip, ":", port,
"/publicKey?token=", token)
k1 <- readBin( curl(qstr, "rb") )
k1 <- readLine( curl(qstr, "rb") )
token = "52d7ef4ee01e2c2c75bff572f957cd4f12d6225eee07ea2f01d01a"
## fetch public key
qstr = paste0("http://", srv_ip, ":", port,
"/publicKey?token=", token)
k1 <- readLine( curl(qstr, "r") )
k1 <- readLines( curl(qstr, "r") )
k1
m1 <- readLines( curl(qstr, "r") )
k1 = readRDS("data/pub_key.rds")
rawToChar(k1)
getwd()
## load public key
pub_key = readRDS("pub_key.rds")
msg = "ABC_DEG1000"
## load public key
pub_key = readRDS("pub_key.rds")
msg2 <- serialize(charToRaw(msg), NULL)
## load public key
pub_key = readRDS("pub_key.rds")
msg2 <- serialize(charToRaw(msg), NULL)
ciphertext <- simple_encrypt(msg2, pub_key)
ciphertext
rawToChar(ciphertext)
rawToBits(ciphertext)
packBits(ciphertext)
x = rawToBits(ciphertext)
class(x)
rawToChar(x)
x[1]
x[2]
class(x[1])
paste0(x, collapse = '')
ciphertext
class(rawToBits(ciphertext))
class(ciphertext)
paste0(ciphertext, collapse = '')
as.raw('04')
as.raw('049a')
as.raw('04 9a')
as.raw('9999')
as.raw('049a')
as.raw('9a')
charToRaw('049a')
as.raw('0c')
as.raw('\x0c')
as.raw('\x9a')
16*2+8
length(ciphertext)
ciphertext
hex2dec('9a')
library(broman)
install.packages("broman")
library(broman)
hex2dec('9a')
as.raw( hex2dec('9a') )
## join hexdecimal string
res <- paste0(ciphertext, collapse = '')
cat(res)
## decrypt ciphertext @ value
pir_key = readRDS("data/pri_key.rds")
library(sodium)
value = "75cf5da48d92b18e4c0a889e7d24132a363888e46b390bf225e6eee0c714c34ebb40362b730722b5a489efa128e9ec2dbb10eda7a2db8f33946a41e44c231403a1b094432eef65b26a15c6c9749474f928c3f5994539e4813a50c70788319cffa966bf"
length(value)
nchar(value)
v2 = raw( nchar(value)/2 )
v2
length(v2)
substr(value, 1,2)
substr(value, 3,4)
library(broman)
v2 = raw( nchar(value)/2 )
for (ii in 1:length(v2) ) {
jj = 2*(ii-1)
v2[ii] = as.raw( hex2bin( substr(value, jj+1, jj+2)) )
}
v2
value
out <- simple_decrypt(v2, pri_key)
out
info = rawToChar( unserialize(out) )
info
source('~/WorkFiles@remote/my_hobby/simple_keyserver/codes/keyserver_api/once_gen_public_key.R', echo=TRUE)
