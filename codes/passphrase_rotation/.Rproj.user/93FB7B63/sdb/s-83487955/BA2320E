{
    "collab_server" : "",
    "contents" : "library(sodium)\nlibrary(doMC)\nlibrary(stringi)\nlibrary(mailR)\n\nencrypt_password_source <- function(access, value)\n{\n    fpath = \"~/simple_keyserver/data/password_src/\"\n    dir.create(fpath, showWarnings = FALSE)\n    \n    magic <- system('cat ~/simple_keyserver/data/magic', intern = TRUE)\n    key = hash(charToRaw(magic))\n    msg = serialize(value, NULL)\n    cipher <- data_encrypt(msg, key)\n    \n    fname = paste0(fpath, access, '.rds')\n    saveRDS(cipher, fname)\n}\n\n## used when we want to change passphrase for all users\nrotate_passphrase <- function()\n{\n    fpath1 = \"~/simple_keyserver/data/passwords/\"\n    \n    access_tbl <- read.csv(\"~/simple_keyserver/data/access_table.csv\", \n                           strip.white = TRUE, stringsAsFactors = FALSE)\n    ## convert USERS into row-wise table\n    access_tbl2 <- foreach(ii=1:nrow(access_tbl), .combine=rbind) %do% {\n        r1 <- access_tbl[ii, ]\n        users = strsplit(r1$USERS, \"/\")[[1]]\n        res <- data.frame(ACCESS=r1$ACCESS, USER=users, stringsAsFactors = FALSE)\n    }\n    \n    users <- unique(access_tbl2$USER)\n    for (uu in users) {\n        ## generate a new passphrase\n        passphrase = paste0( stri_rand_strings(1, 4, pattern=\"[a-z]\"),\n                     stri_rand_strings(1, 4, pattern=\"[0-9]\") )\n        ## clean up old data\n        unlink(file.path(fpath1,uu), recursive = TRUE)\n        ## save this new passphrase\n        dir.create(file.path(fpath1,uu), showWarnings = FALSE)\n        cmd = paste0('echo ', passphrase, ' > ', fpath1, uu, '/passphrase')\n        system(cmd)\n        ## encrypt passwords with new passphrase\n        accesses = subset(access_tbl2, USER==uu)\n        for (ii in 1:nrow(accesses)) {\n            access = accesses[ii, ]\n            encrypt_user_password(access, passphrase)\n        }\n        ## email send out new passphrase\n        email_new_passphrase(uu, passphrase)\n    }\n    \n}\n\n\nencrypt_user_password <- function(access, passphrase)\n{\n    fpath = \"~/simple_keyserver/data/password_src/\"\n    fpath2 = \"~/simple_keyserver/data/passwords/\"\n    \n    ## load password from source\n    magic <- system('cat ~/simple_keyserver/data/magic', intern = TRUE)\n    key = hash(charToRaw(magic))\n    cipher = try( readRDS(paste0(fpath, access$ACCESS, '.rds')) )\n    if (class(cipher)!='try-error') {\n        ## decrypt\n        orig <- data_decrypt(cipher, key)\n            # value = unserialize(orig)\n        ## encrypt with user's passphrase\n        key = hash(charToRaw(passphrase))\n            # msg = serialize(value, NULL)\n        cipher2 <- data_encrypt(orig, key)\n        fn = paste0(fpath2, access$USER, '/', access$ACCESS, '.rds')\n        saveRDS(cipher2, fn)\n    } else {\n        print(cipher)\n    }\n}\n\n\n## used when updating encrypted passwords (using old passphrases)\nupdate_user_passwords <- function()\n{\n    fpath1 = \"~/simple_keyserver/data/passwords/\"\n    \n    access_tbl <- read.csv(\"~/simple_keyserver/data/access_table.csv\", \n                           strip.white = TRUE, stringsAsFactors = FALSE)\n    ## convert USERS into row-wise table\n    access_tbl2 <- foreach(ii=1:nrow(access_tbl), .combine=rbind) %do% {\n        r1 <- access_tbl[ii, ]\n        users = strsplit(r1$USERS, \"/\")[[1]]\n        res <- data.frame(ACCESS=r1$ACCESS, USER=users, stringsAsFactors = FALSE)\n    }\n    \n    users <- unique(access_tbl2$USER)\n    for (uu in users) {\n        ## fetch old passphrase\n        cmd = paste0(\"cat \", fpath1, uu, \"/passphrase\")\n        passphrase = system(cmd, intern = TRUE)\n        ## clean up old data\n        cmd = paste0(\"rm \", fpath1, uu, \"/*.rds\")\n        system(cmd)\n        ## encrypt passwords with new passphrase\n        accesses = subset(access_tbl2, USER==uu)\n        for (ii in 1:nrow(accesses)) {\n            access = accesses[ii, ]\n            encrypt_user_password(access, passphrase)\n        }\n    }\n    \n}\n\n\nemail_new_passphrase <- function(uu, passphrase)\n{\n    sender <- \"myemail@gmail.com\" # Replace with a valid address\n    \n    ## read email list\n    email_list <- read.csv(\"~/simple_keyserver/data/email_list.csv\",\n                           strip.white = TRUE, stringsAsFactors = FALSE)\n    \n    addr <- subset(email_list, USER==uu)\n    if (nrow(addr)>0) {\n        send.mail(from = sender,\n                  to = addr$EMAIL,\n                  subject=\"New Passphrase for Keyserver\",\n                  body = passphrase,\n                  smtp = list(host.name = \"smtp.gmail.com\", port = 465,\n                              user.name=\"myemail@gmail.com\",\n                              passwd=\"mypassword\", ssl=TRUE),\n                  authenticate = TRUE, send = TRUE)\n    } else {\n        cat(uu, \"is not in the email list\\n\")\n    }\n}\n",
    "created" : 1519442196346.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1668629671",
    "id" : "BA2320E",
    "lastKnownWriteTime" : 1519442035,
    "last_content_update" : 1519442035,
    "path" : "~/WorkFiles@remote/my_hobby/simple_keyserver/codes/passphrase_rotation/fnc_Process.R",
    "project_path" : "fnc_Process.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}